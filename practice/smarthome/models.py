# smarthome/models.py

from django.db import models


class Room(models.Model):
    name = models.CharField(max_length=100)
    icon = models.CharField(max_length=10, default="üõãÔ∏è")  # —ç–º–æ–¥–∂–∏ –∞–±–æ –Ω–∞–∑–≤–∞ —ñ–∫–æ–Ω–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name


class Device(models.Model):
    DEVICE_TYPES = [
        ('kettle', '–ß–∞–π–Ω–∏–∫'),
        ('fridge', '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫'),
        ('tv', '–¢–µ–ª–µ–≤—ñ–∑–æ—Ä'),
        ('washer', '–ü—Ä–∞–ª—å–Ω–∞ –º–∞—à–∏–Ω–∞'),
        ('light', '–û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è'),
        ('climate', '–ö–ª—ñ–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å'),
        ('motion_sensor', '–î–∞—Ç—á–∏–∫ —Ä—É—Ö—É'),
        ('gas_sensor', '–î–∞—Ç—á–∏–∫ –∑–∞–≥–∞–∑–æ–≤–∞–Ω–æ—Å—Ç—ñ'),
        ('smoke_sensor', '–î–∞—Ç—á–∏–∫ –¥–∏–º—É'),
        ('camera', '–ö–∞–º–µ—Ä–∞'),
        ('humidifier', '–ó–≤–æ–ª–æ–∂—É–≤–∞—á –ø–æ–≤—ñ—Ç—Ä—è'),
        ('air_purifier', '–û—á–∏—â—É–≤–∞—á –ø–æ–≤—ñ—Ç—Ä—è'),
        ('thermostat', '–¢–µ—Ä–º–æ—Å—Ç–∞—Ç'),
        ('smart_plug', '–†–æ–∑—É–º–Ω–∞ —Ä–æ–∑–µ—Ç–∫–∞'),
        ('robot_vacuum', '–†–æ–±–æ—Ç-–ø–∏–ª–æ—Å–æ—Å'),
        ('ventilation', '–ë—Ä–∏–∑–µ—Ä / –≤–µ–Ω—Ç–∏–ª—è—Ü—ñ—è'),
    ]

    ICONS = {
        'kettle': '‚òï',
        'fridge': 'üßä',
        'tv': 'üì∫',
        'washer': 'üß∫',
        'light': 'üí°',
        'climate': 'üå°Ô∏è',
        'motion_sensor': 'üéØ',
        'gas_sensor': 'üõ¢Ô∏è',
        'smoke_sensor': 'üî•',
        'camera': 'üé•',
        'humidifier': 'üíß',
        'air_purifier': 'üåÄ',
        'thermostat': 'üåû',
        'smart_plug': 'üîå',
        'robot_vacuum': 'ü§ñ',
        'ventilation': 'üå¨Ô∏è',
    }

    room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='devices')
    name = models.CharField(max_length=100)
    icon = models.CharField(max_length=10, blank=True)  # emoji or custom
    device_type = models.CharField(max_length=50, choices=DEVICE_TYPES)
    is_on = models.BooleanField(default=False)

    # –û–±—â–∏–µ / –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    brightness = models.PositiveIntegerField(null=True, blank=True)              # light
    temperature = models.FloatField(null=True, blank=True)                       # fridge, sensors
    target_temperature = models.FloatField(null=True, blank=True)               # thermostat, climate
    current_temperature = models.FloatField(null=True, blank=True)              # thermostat
    humidity = models.FloatField(null=True, blank=True)                          # humidifier
    target_humidity = models.FloatField(null=True, blank=True)                  # humidifier
    water_level = models.FloatField(null=True, blank=True)                      # humidifier
    air_quality = models.CharField(max_length=50, null=True, blank=True)        # air_purifier
    fan_speed = models.PositiveIntegerField(null=True, blank=True)              # air_purifier, ventilation
    ionization = models.BooleanField(null=True, blank=True)                     # humidifier, air_purifier
    filter_status = models.CharField(max_length=50, null=True, blank=True)      # air_purifier, ventilation
    airflow_speed = models.PositiveIntegerField(null=True, blank=True)          # ventilation
    heating = models.BooleanField(null=True, blank=True)                        # ventilation, climate
    boiling = models.BooleanField(null=True, blank=True)                        # kettle
    wash_mode = models.CharField(max_length=50, null=True, blank=True)          # washer
    wash_time_left = models.PositiveIntegerField(null=True, blank=True)         # washer
    triggered = models.BooleanField(null=True, blank=True)                      # sensors
    recording = models.BooleanField(null=True, blank=True)                      # camera
    battery_level = models.PositiveIntegerField(null=True, blank=True)          # robot_vacuum
    cleaning_mode = models.CharField(max_length=50, null=True, blank=True)      # robot_vacuum
    status = models.CharField(max_length=50, null=True, blank=True)             # robot_vacuum
    power_consumption = models.FloatField(null=True, blank=True)                # smart_plug
    schedule = models.JSONField(null=True, blank=True)                          # smart_plug, thermostat
    mode = models.CharField(max_length=50, null=True, blank=True)               # climate, thermostat

    created_at = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        if not self.icon and self.device_type in self.ICONS:
            self.icon = self.ICONS[self.device_type]
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.icon} {self.name} ({self.get_device_type_display()})"

    # models.py
class Switch(models.Model):
    room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='switches')
    name = models.CharField(max_length=100)
    icon = models.CharField(max_length=10, default='üîò')
    linked_lamps = models.ManyToManyField(Device, related_name='controlled_by',
                                          limit_choices_to={'device_type': 'light'})

    def __str__(self):
        return f"{self.icon} {self.name}"

