import json

from django.http import HttpResponseBadRequest, JsonResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST

from .models import Room, Device, Switch
from .forms import RoomForm, AddDeviceForm, ALLOWED_DEVICES_BY_ROOM, AddSwitchForm
from django.template.loader import render_to_string


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
def home(request):
    rooms = Room.objects.all()
    form = RoomForm()

    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º POST –ø—Ä—è–º–æ —Ç—É—Ç (–≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤—å—é—Ö–∏)
    if request.method == 'POST':
        form = RoomForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('home')

    return render(request, 'smarthome/home.html', {'rooms': rooms, 'form': form})

def reset_home(request):
    Room.objects.all().delete()
    Device.objects.all().delete()
    return redirect('home')

def device_settings_view(request, device_id):
    device = get_object_or_404(Device, id=device_id)

    html = render_to_string("smarthome/partials/device_settings.html", {'device': device})
    return JsonResponse({'html': html})



# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã: —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ + –∫–Ω–æ–ø–∫–∏ "–¥–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
def room_detail(request, room_id):
    room = get_object_or_404(Room, id=room_id)
    devices = room.devices.all()
    switches = room.switches.prefetch_related('linked_lamps')

    # –¢–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å
    existing_types = set(devices.values_list('device_type', flat=True))
    room_type = room.name  # –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ ROOM_CHOICES

    # –ö–∞–∫–∏–µ —Ç–∏–ø—ã –º–æ–∂–Ω–æ –µ—â—ë –¥–æ–±–∞–≤–∏—Ç—å –≤ —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É
    allowed_types = ALLOWED_DEVICES_BY_ROOM.get(room_type, [])
    available_types = []
    for dt in Device.DEVICE_TYPES:
        if dt[0] in allowed_types:
            # ‚ùó –ª–∞–º–ø–æ—á–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–≥–¥–∞
            if dt[0] == 'light' or dt[0] not in existing_types:
                available_types.append(dt)

    # –§–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    add_forms = []
    for type_code, type_label in available_types:
        form = AddDeviceForm(initial={'device_type': type_code})
        add_forms.append({
            'type': type_code,
            'label': type_label,
            'icon': Device.ICONS.get(type_code, 'üîß'),
            'form': form
        })
    switch_form = AddSwitchForm()
    return render(request, 'smarthome/room_detail.html', {
        'room': room,
        'devices': devices,
        'switches': switches,  # üí° –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º —Å–≤–∏—Ç—á–∏
        'add_forms': add_forms,
        'switch_form': switch_form,
    })


# –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –∫–æ–º–Ω–∞—Ç—É
def add_device_to_room(request, room_id):
    room = get_object_or_404(Room, id=room_id)

    if request.method == 'POST':
        device_type = request.POST.get('device_type')
        form = AddDeviceForm({'device_type': device_type})

        if form.is_valid():
            form.save(room=room)

    return redirect('room_detail', room_id=room.id)


@csrf_exempt  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ @csrf_protect + csrf_token –≤ JS
def update_device(request):
    if request.method != 'POST':
        return HttpResponseBadRequest("–¢—ñ–ª—å–∫–∏ POST, –±—Ä–∞—Ç")

    try:
        data = json.loads(request.body)
        device_id = data.get('device_id')
        field = data.get('field')
        value = data.get('value')

        device = Device.objects.get(id=device_id)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—è
        if not hasattr(device, field):
            return JsonResponse({'error': '–ù–µ–º–∞ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è'}, status=400)

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ (bool, int, float)
        field_type = type(getattr(device, field))
        if field_type == bool:
            value = value in [True, 'true', '1', 1]
        elif field_type == int:
            value = int(value)
        elif field_type == float:
            value = float(value)
        elif field_type == str:
            value = str(value)

        setattr(device, field, value)
        device.save()

        return JsonResponse({'success': True, 'device_id': device.id, 'field': field, 'new_value': value})

    except Device.DoesNotExist:
        return JsonResponse({'error': '–î–µ–≤–∞–π—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)


@require_POST
def add_switch_to_room(request, room_id):
    room = get_object_or_404(Room, id=room_id)
    form = AddSwitchForm(request.POST)

    if form.is_valid():
        switch = form.save(room = room, commit=False)
        switch.room = room
        switch.save()
        form.save_m2m()
    else:
        print("‚ùå Invalid switch form:", form.errors)

    return redirect('room_detail', room_id=room.id)

@require_POST
@csrf_exempt
def switch_toggle_view(request, switch_id):
    try:
        switch = Switch.objects.get(id=switch_id)
        lamps = switch.linked_lamps.all()

        if not lamps.exists():
            return JsonResponse({'message': '–ù–µ–º–∞—î –ª–∞–º–ø –¥–æ —Ü—å–æ–≥–æ –≤–∏–º–∏–∫–∞—á–∞'}, status=400)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω—ã ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å, –∏–Ω–∞—á–µ –≤–∫–ª—é—á–∏—Ç—å
        all_on = all(lamp.is_on for lamp in lamps)
        new_state = not all_on

        for lamp in lamps:
            lamp.is_on = new_state
            lamp.save()

        return JsonResponse({
            'success': True,
            'switch_id': switch_id,
            'new_state': new_state,
            'message': f"–£—Å—ñ –ª–∞–º–ø–∏ {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if new_state else '–≤–∏–º–∫–Ω–µ–Ω–æ'}",
            'last_lamp_id': lamps.last().id  # –º–æ–∂–µ—à —é–∑–∞—Ç–∏ –≤ JS
        })

    except Switch.DoesNotExist:
        return JsonResponse({'error': '–í–∏–º–∏–∫–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}, status=404)